name: Build Netinstall ISOs

on:
  schedule:
    - cron: "3 2 1 * *"
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        variant:
          - name: atomized
            bootc_image: ghcr.io/mrjncsk/atomized:latest
          - name: atomized-nvidia
            bootc_image: ghcr.io/mrjncsk/atomized-nvidia:latest

    env:
      BASE_VERSION: "v0.1"

    steps:
      - name: Set RELEASE_TAG
        id: set_release_tag
        run: |
          echo "RELEASE_TAG=${BASE_VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "Release-Tag ist $RELEASE_TAG"

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Build ISO ${{ matrix.variant.name }}
        uses: osbuild/bootc-image-builder-action@main
        with:
          builder-image: ghcr.io/lorbuschris/bootc-image-builder:20250608
          config-file: ./disk/iso.toml
          image: quay.io/fedora/fedora-bootc:latest
          types: anaconda-iso
        env:
          BOOTC_IMAGE: ${{ matrix.variant.bootc_image }}

      - name: Prepare output folder
        run: mkdir -p ./output

      - name: Fix ownership of output files
        run: sudo chown -R $USER:$USER ./output

      - name: Rename ISO for ${{ matrix.variant.name }}
        run: mv ./output/bootiso/install.iso ./output/${{ matrix.variant.name }}-netinstall-${{ env.RELEASE_TAG }}.iso

      - name: Create SHA256 checksum
        run: sha256sum ./output/${{ matrix.variant.name }}-netinstall-${{ env.RELEASE_TAG }}.iso > ./output/${{ matrix.variant.name }}-netinstall-${{ env.RELEASE_TAG }}.iso.sha256

      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${RELEASE_TAG}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag if not exists
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $RELEASE_TAG
          git push origin $RELEASE_TAG

      - name: Create Release if not exists
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ISO and checksum to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "${{ matrix.variant.name }} Netinstall ISO ${{ env.RELEASE_TAG }}"
          body: |
            Minimal Anaconda Netinstall ISO for `${{ matrix.variant.name }}`.
            Installs latest Bootc-Image `${{ matrix.variant.bootc_image }}`.
          files: |
            ./output/${{ matrix.variant.name }}-netinstall-${{ env.RELEASE_TAG }}.iso
            ./output/${{ matrix.variant.name }}-netinstall-${{ env.RELEASE_TAG }}.iso.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
