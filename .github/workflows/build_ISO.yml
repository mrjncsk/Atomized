name: Build ISOs

on:
  schedule:
    - cron: "3 2 1 * *"
  workflow_dispatch:

env:
  BASE_VERSION: "v0.2"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set_tag.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all git tags
        run: git fetch --tags

      - name: Determine next release tag (semver-style)
        id: set_tag
        run: |
          latest=$(git tag | grep "^${BASE_VERSION}\." | sed "s/^${BASE_VERSION}\.//" | sort -V | tail -n 1)
          if [ -z "$latest" ]; then
            next=0
          else
            next=$((latest + 1))
          fi
          TAG="${BASE_VERSION}.${next}"
          echo "release_tag=$TAG" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          echo "Release Tag: $TAG"

      - name: Create GitHub release (if not exists)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release view "$RELEASE_TAG" || gh release create "$RELEASE_TAG" --title "$RELEASE_TAG" --notes "Atomized ISO Downloads:"

  build:
    needs: prepare
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        variant:
          - name: atomized
            bootc_image: ghcr.io/mrjncsk/atomized:latest
          - name: atomized-nvidia
            bootc_image: ghcr.io/mrjncsk/atomized-nvidia:latest
    env:
      RELEASE_TAG: ${{ needs.prepare.outputs.release_tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history, tags included

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e
        with:
          remove-codeql: true

      - name: Build ISO for ${{ matrix.variant.name }}
        uses: osbuild/bootc-image-builder-action@main
        with:
          builder-image: ghcr.io/lorbuschris/bootc-image-builder:20250608
          config-file: ./disk/iso.toml
          image: ${{ matrix.variant.bootc_image }}
          types: anaconda-iso
        env:
          BOOTC_IMAGE: ${{ matrix.variant.bootc_image }}

      - name: Prepare output folder
        run: mkdir -p ./output

      - name: Fix ownership of output files
        run: sudo chown -R $USER:$USER ./output

      - name: Rename ISO
        run: |
          mv ./output/bootiso/install.iso ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso

      - name: Create SHA256 checksum
        run: |
          sha256sum ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso > ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso.sha256

      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: |
            ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso
            ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso.sha256

      - name: Install Internet Archive CLI
        run: pip install internetarchive

      - name: Configure Internet Archive CLI
        run: |
          mkdir -p ~/.config
          echo "[s3]" > ~/.config/ia.ini
          echo "access = $ARCHIVE_ACCESS_KEY" >> ~/.config/ia.ini
          echo "secret = $ARCHIVE_SECRET_KEY" >> ~/.config/ia.ini
        env:
          ARCHIVE_ACCESS_KEY: ${{ secrets.ARCHIVE_ACCESS_KEY }}
          ARCHIVE_SECRET_KEY: ${{ secrets.ARCHIVE_SECRET_KEY }}

      - name: Upload ISO and logo to archive.org
        run: |
          ARCHIVE_ID="${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}"
          TITLE="${{ matrix.variant.name }} ${{ env.RELEASE_TAG }} Installation ISO"
          DESCRIPTION="${{ matrix.variant.name }} ${{ env.RELEASE_TAG }} Atomic Linux Installation ISO"

          ia upload "${ARCHIVE_ID}" \
            ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso \
            ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso.sha256 \
            ./files/usr/share/atomized/Logo.png \
            ./files/usr/share/atomized/Title.png \
            --metadata="title:${TITLE}" \
            --metadata="mediatype:software" \
            --metadata="collection:opensource" \
            --metadata="logo=Logo.png" \
            --metadata="description:${DESCRIPTION}"

      - name: Print archive.org link
        run: |
          echo "Archive.org URL: https://archive.org/details/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}"
