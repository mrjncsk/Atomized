name: ISO Workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "./disk/iso.toml"
      - "./.github/workflows/build_iso.yml"
  push:
    tags:
      - "v*" # Tag-basiert fÃ¼r Releases

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  IMAGE_TAG: "latest"
  BIB_IMAGE: "ghcr.io/lorbuschris/bootc-image-builder:20250608"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-iso:
    name: Build ISO Image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        base_tag: [atomized, atomized-nvidia]
    env:
      IMAGE_NAME: ${{ github.event.repository.name }}${{ matrix.base_tag == 'atomized-nvidia' && '-nvidia' || '' }}

    permissions:
      contents: write
      packages: read
      id-token: write

    steps:
      - name: Prepare environment
        run: |
          echo "DISK_TYPE=anaconda-iso" >> $GITHUB_ENV
          echo "IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          echo "USER_UID=$(id -u)" >> $GITHUB_ENV
          echo "USER_GID=$(id -g)" >> $GITHUB_ENV

      - name: Maximize build space
        if: inputs.platform != 'arm64'
        uses: ublue-os/remove-unwanted-software@v9
        with:
          remove-codeql: true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build ISO
        id: build
        uses: osbuild/bootc-image-builder-action@main
        with:
          builder-image: ${{ env.BIB_IMAGE }}
          config-file: ./disk/iso.toml
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          types: anaconda-iso
          additional-args: --use-librepo=True --rootfs=ext4

      - name: Generate checksums
        run: |
          cd "${{ steps.build.outputs.output-directory }}"
          sha256sum *.iso > SHA256SUMS

      - name: Determine next tag
        id: version
        run: |
          # Hole alle Tags, die mit v0.1. beginnen
          git fetch --tags
          latest=$(git tag --list "v0.1.*" | sort -V | tail -n 1)

          if [ -z "$latest" ]; then
            next="v0.1.0"
          else
            base=$(echo "$latest" | cut -d. -f1,2)    # v0.1
            patch=$(echo "$latest" | cut -d. -f3)     # X
            patch=$((patch + 1))
            next="${base}.${patch}"
          fi

          echo "next_tag=$next" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ steps.version.outputs.next_tag }}
          git push origin ${{ steps.version.outputs.next_tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.next_tag }}
          name: Release ${{ steps.version.outputs.next_tag }}
          draft: false
          prerelease: false
          files: ${{ steps.build.outputs.output-directory }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
