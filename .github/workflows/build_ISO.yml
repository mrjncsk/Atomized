name: ISO Workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "./disk/iso.toml"
      - "./.github/workflows/build_iso.yml"

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  IMAGE_TAG: "latest"
  BIB_IMAGE: "ghcr.io/lorbuschris/bootc-image-builder:20250608"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-iso:
    name: Build ISO Image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        base_tag: [atomized, atomized-nvidia]
    permissions:
      contents: write
      packages: read
      id-token: write

    steps:
      - name: Prepare environment
        run: |
          echo "DISK_TYPE=anaconda-iso" >> $GITHUB_ENV
          echo "IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ github.event.repository.name }}${{ matrix.base_tag == 'atomized-nvidia' && '-nvidia' || '' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          echo "USER_UID=$(id -u)" >> $GITHUB_ENV
          echo "USER_GID=$(id -g)" >> $GITHUB_ENV

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v9
        with:
          remove-codeql: true

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Determine next tag (v0.1.X)
        id: tag
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v0\.1\.[0-9]+$' | head -n1 | sed 's/v0\.1\.//')
          if [[ -z "$latest" ]]; then
            next=0
          else
            next=$((latest + 1))
          fi
          tag="v0.1.${next}"
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "Using tag: $tag"

      - name: Build ISO
        id: build
        uses: osbuild/bootc-image-builder-action@main
        with:
          builder-image: ${{ env.BIB_IMAGE }}
          config-file: ./disk/iso.toml
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          types: anaconda-iso
          additional-args: --use-librepo=True --rootfs=ext4

      - name: Rename ISOs with version tag
        run: |
          version=${{ steps.date.outputs.date }}  # z.â€¯B. "v0.1.0"
          mv ./output/anaconda-iso/install.iso ./output/atomized-${version}.iso
          mv ./output/anaconda-iso/install.sha256 ./output/atomized-${version}.sha256
          mv ./output/anaconda-iso/install.md5 ./output/atomized-${version}.md5
          mv ./output/anaconda-iso/install-nvidia.iso ./output/atomized-nvidia-${version}.iso
          mv ./output/anaconda-iso/install-nvidia.sha256 ./output/atomized-nvidia-${version}.sha256
          mv ./output/anaconda-iso/install-nvidia.md5 ./output/atomized-nvidia-${version}.md5

      - name: Create GitHub Release and upload ISO
        uses: softprops/action-gh-release@v2
        if: github.event_name != 'pull_request'
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          files: ${{ steps.build.outputs.output-directory }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
