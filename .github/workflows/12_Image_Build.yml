name: Image Workflow 2 Build

on:
  workflow_dispatch:
    inputs:
      release_tag:
        required: true
        type: string

jobs:
  build_and_push:
    name: Build Image ${{ matrix.variant.name }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        variant:
          - name: atomized
            base_image: ghcr.io/ublue-os/bazzite:latest
          - name: atomized-nvidia
            base_image: ghcr.io/ublue-os/bazzite-nvidia:latest

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      IMAGE_DESC: "Personalized Atomic OS Image"
      IMAGE_KEYWORDS: "bootc,ublue,universal-blue"
      IMAGE_LOGO_URL: "https://avatars.githubusercontent.com/u/103059356?s=200&v=4"
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      IMAGE_NAME: ${{ matrix.variant.name }}
      DEFAULT_TAG: ${{ github.event.inputs.release_tag }}
      RELEASE_TAG: ${{ inputs.release_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: echo "date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/blob/main/Containerfile
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}

      - name: Build Image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          oci: false
          build-args: |
            BASE_IMAGE=${{ matrix.variant.base_image }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Sign container image
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY "$IMAGE_FULL:$RELEASE_TAG"
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Set GitHub release notes to package link only
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          RELEASE_TAG: ${{ github.event.inputs.release_tag }}
        run: |
          TAG="$RELEASE_TAG"
          OLD_NOTES=$(gh release view "$TAG" --json body -q .body)
          NEW_LINK="- ghcr.io/mrjncsk/${{ matrix.variant.name }}:$RELEASE_TAG"
          gh release edit "$TAG" --notes "$OLD_NOTES"$'\n'"$NEW_LINK"
