name: Build ISO 2

on:
  workflow_dispatch:
    inputs:
      release_tag:
        required: true
        type: string

jobs:
  build:
    name: Build ISO ${{ matrix.variant.name }}
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        variant:
          - name: atomized
            bootc_image: ghcr.io/mrjncsk/atomized:latest
          - name: atomized-nvidia
            bootc_image: ghcr.io/mrjncsk/atomized-nvidia:latest
          - name: atomized-caelestia
            bootc_image: ghcr.io/mrjncsk/atomized-caelestia:latest
          - name: atomized-caelestia-nvidia
            bootc_image: ghcr.io/mrjncsk/atomized-caelestia-nvidia:latest
          - name: atomized-hyprpanel
            bootc_image: ghcr.io/mrjncsk/atomized-hyprpanel:latest
          - name: atomized-hyprpanel-nvidia
            bootc_image: ghcr.io/mrjncsk/atomized-hyprpanel-nvidia:latest
    env:
      RELEASE_TAG: ${{ inputs.release_tag }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e
        with:
          remove-codeql: true

      - name: Build ISO
        uses: osbuild/bootc-image-builder-action@main
        with:
          builder-image: ghcr.io/lorbuschris/bootc-image-builder:20250608
          config-file: ./Build/iso.toml
          image: ${{ matrix.variant.bootc_image }}
          types: anaconda-iso
        env:
          BOOTC_IMAGE: ${{ matrix.variant.bootc_image }}

      - name: Prepare output folder
        run: mkdir -p ./output

      - name: Fix ownership of output files
        run: sudo chown -R $USER:$USER ./output

      - name: Rename ISO
        run: |
          mv ./output/bootiso/install.iso ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso

      - name: Create SHA256 checksum
        run: |
          sha256sum ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso > ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso.sha256

      - name: Install Internet Archive CLI
        run: pip install internetarchive

      - name: Configure Internet Archive CLI
        run: |
          mkdir -p ~/.config
          echo "[s3]" > ~/.config/ia.ini
          echo "access = $ARCHIVE_ACCESS_KEY" >> ~/.config/ia.ini
          echo "secret = $ARCHIVE_SECRET_KEY" >> ~/.config/ia.ini
        env:
          ARCHIVE_ACCESS_KEY: ${{ secrets.ARCHIVE_ACCESS_KEY }}
          ARCHIVE_SECRET_KEY: ${{ secrets.ARCHIVE_SECRET_KEY }}

      - name: Upload ISO to archive.org
        run: |
          ARCHIVE_ID="${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}"
          TITLE="${{ matrix.variant.name }} ${{ env.RELEASE_TAG }} Installation ISO"
          DESCRIPTION="${{ matrix.variant.name }} ${{ env.RELEASE_TAG }} Atomic Linux Installation ISO"

          ia upload "${ARCHIVE_ID}" \
            ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso \
            ./output/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}.iso.sha256 \
            ./files/usr/share/atomized/Logo.png \
            ./files/usr/share/atomized/Title.png \
            --metadata="title:${TITLE}" \
            --metadata="mediatype:software" \
            --metadata="collection:opensource" \
            --metadata="logo=Logo.png" \
            --metadata="description:${DESCRIPTION}"

      - name: Append archive.org link to GitHub Release Notes
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          RELEASE_TAG: ${{ github.event.inputs.release_tag }}
        run: |
          TAG="$RELEASE_TAG"
          OLD_NOTES=$(gh release view "$TAG" --json body -q .body)
          NEW_LINK="- https://archive.org/details/${{ matrix.variant.name }}-${{ env.RELEASE_TAG }}"
          gh release edit "$TAG" --notes "$OLD_NOTES"$'\n'"$NEW_LINK"
